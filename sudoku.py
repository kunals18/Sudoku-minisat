import sys

def read_input():

	if(len(sys.argv) >= 2):
		f = open(sys.argv[1], 'r')
		arr = []
		length = len(f.readlines())

		if length >= 9:
			f = open(sys.argv[1], 'r')
			arr = [list(line.rstrip('\n')) for line in f]
		else:
			f = open(sys.argv[1], 'r')
			slist = f.readlines()
			string = slist[0]
			for i in range(9):
				arr.append(list(string[(9*i):(9*(i+1))]))				

		return arr
	else:
		print "\npython sudoku.py <input file>\n"

def cnf_generate(arr):

	unitCount = 0

	f = open('cnf.txt', 'w')

	if arr:
		
		#count number of unit clauses
		for x, line in enumerate(arr):
			for y, value in enumerate(line):
				if value not in ['0', '.']:
					unitCount += 1

		f.write("p cnf %s %s\n" % ((9*9*9), unitCount+8829))

		#unit clauses 
		for x, line in enumerate(arr):
			for y, value in enumerate(line):
				if value not in ['0', '.', '*', '?']:
					f.write(str((((x)*81)+((y)*9)+int(value))))
					f.write(" 0\n")

		#At least one number in each entry
		for x in range(9):
			x += 1
			for y in range(9):
				y += 1
				for z in range(9):
					z += 1
					f.write(str((((x-1)*81)+((y-1)*9)+z))+" ")
				f.write("0\n")

		#one number per row
		for y in range(9):
			y += 1
			for z in range(9):
				z += 1
				for x in range(9-1):
					x += 1
					i = x + 1
					while i <= 9:
						f.write(str((-1*(((x-1)*81)+((y-1)*9)+z)))+" ")
						f.write(str((-1*(((i-1)*81)+((y-1)*9)+z)))+" ")
						f.write("0\n")
						i +=1

		#one number per column
		for x in range(9):
			x += 1
			for z in range(9):
				z += 1
				for y in range(9-1):
					y += 1
					j = y + 1
					while j <= 9:
						f.write(str((-1*(((x-1)*81)+((y-1)*9)+z)))+" ")
						f.write(str((-1*(((x-1)*81)+((j-1)*9)+z)))+" ")
						f.write("0\n")
						j +=1

		#one number in 3X3 box
		for z in range(9):
			z +=1
			for i in range(int(9 ** 0.5)):
				for j in range(int(9 ** 0.5)):				
					for x in range (int(9 ** 0.5)):
						x +=1
						for y in range((int(9 ** 0.5)-1)):
							y += 1
							k = y + 1
							while k <= int(9 ** 0.5):
								f.write(str((-1*((((int(9 ** 0.5)*i)+x-1) * 81) + (((int(9 ** 0.5)*j)+y-1) * 9) + z)))+" ")
								f.write(str((-1*((((int(9 ** 0.5)*i)+x-1) * 81) + (((int(9 ** 0.5)*j)+k-1) * 9) + z)))+" ")
								f.write("0\n")
								k +=1

		for z in range(9):
			z +=1
			for i in range(int(9 ** 0.5)):
				for j in range(int(9 ** 0.5)):			
					for x in range(int(9 ** 0.5)-1):
						x += 1
						for y in range(int(9 ** 0.5)):
							y += 1
							k = x + 1
							while k <= int(9 ** 0.5):
								for l in range(int(9 ** 0.5)):
									l += 1
									f.write(str((-1*((((int(9 ** 0.5)*i)+x-1) * 81) + (((int(9 ** 0.5)*j)+y-1) * 9) + z)))+" ")
									f.write(str((-1*((((int(9 ** 0.5)*i)+k-1) * 81) + (((int(9 ** 0.5)*j)+l-1) * 9) + z)))+" ")
									f.write("0\n")
								k +=1

		#unique diagonal entry
		for z in range(9):
			z += 1
			for x in range(9-1):
				x += 1
				l = x + 1
				while l <= 9:
					f.write(str((-1*(((x-1)*81)+((x-1)*9)+z)))+" ")
					f.write(str((-1*(((l-1)*81)+((l-1)*9)+z)))+" ")
					f.write("0\n")
					l +=1

		for z in range(9):
			z += 1
			for x in range(9-1):
				x += 1
				l = x + 1
				while l <= 9:
					f.write(str((-1*(((x-1)*81)+((9-x)*9)+z)))+" ")
					f.write(str((-1*(((l-1)*81)+((9-l)*9)+z)))+" ")
					f.write("0\n")
					l +=1

	else:
		print "arr is empty\n"

def parse():

	f = open(sys.argv[1], 'r')
	arr = [line for line in f]
	sol = arr[1].split()

	print ""
	x = 0
	for index, value in enumerate(sol):
		if int(value) > 0:
			x += 1
			ans = ((int(value)%(81))%9)
			if ans == 0:
				print 9,
			else:	
				print ans,

			if x % 9 == 0:
				print ""

	print ""

def main():

	# generate cnf file
	if(sys.argv[2] == 'cnf'):
		arr = read_input()
		cnf_generate(arr)

	# parse the file generated by minisat
	elif(sys.argv[2] == 'parse'):
		parse()

main()
